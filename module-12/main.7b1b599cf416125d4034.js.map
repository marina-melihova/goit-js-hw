{"version":3,"sources":["webpack:///./js/fetchCountries.js","webpack:///./js/refs.js","webpack:///./index.js"],"names":["notice","query","document","querySelector","output","stack1","Stack","dir1","firstpos1","dir2","firstpos2","fetchCountries","searchQuery","markup","fetch","then","response","json","data","length","error","text","stack","close","country","name","capital","population","languages","forEach","flag","countries","map","refs","innerHTML","strQuery","value","onInputDebounce","debounce","e","target","addEventListener"],"mappings":"6HAKIA,E,qBCLW,GACbC,MAAOC,SAASC,cAAc,eAC9BC,OAAQF,SAASC,cAAc,Y,0EDI3BE,G,oBAAS,IAAIC,QAAM,CACvBC,KAAM,OACNC,UAAW,GACXC,KAAM,OACNC,UAAW,MAqDEC,EAlDQ,SAAAC,GACrB,IAAIC,EAAS,GAEb,OAAOC,MADK,yCACOF,GAChBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,GAAIA,EAAKC,OAAS,GAChBnB,EAASoB,gBAAM,CACbC,KAAM,8DACNC,MAAOjB,SAEJ,GAAoB,IAAhBa,EAAKC,OAAc,CACxBd,EAAOc,QACTnB,EAAOuB,QAET,IAAMC,EAAUN,EAAK,GACrBL,EAAS,4EAC2BW,EAAQC,KADtC,oLAIqED,EAAQE,QAJ7E,kGAK2EF,EAAQG,WALnF,SAMFH,EAAQI,UAAUT,OAAS,GAC7BN,GAAU,yCACVA,GAAU,wCACVW,EAAQI,UAAUC,SAAQ,YAAc,IAAXJ,EAAW,EAAXA,KAC3BZ,GAAU,OAAOY,EAAX,WAERZ,GAAU,SAEVA,GAAU,0EAA0EW,EAAQI,UAAU,GAAGH,KAAnG,SAERZ,GAAU,0DAC+BW,EAAQM,KAD3C,qCAGD,CACDzB,EAAOc,QACTnB,EAAOuB,QAET,IAAMQ,EAAYb,EAAKc,KAAI,qBAAGP,QAC9BZ,EAAS,4BACTkB,EAAUF,SAAQ,SAAAL,GAChBX,GAAU,OAAOW,EAAX,WAERX,GAAU,QAEZoB,EAAK7B,OAAO8B,UAAYrB,MEtD1BsB,G,UAAW,IAEfF,EAAKhC,MAAMmC,MAAQ,GAEnB,IAAMC,EAAkBC,KAAS,SAAAC,IAC/BJ,EAAWI,EAAEC,OAAOJ,QAElBzB,EAAewB,KAEhB,KAEHF,EAAKhC,MAAMwC,iBAAiB,QAASJ,K","file":"main.7b1b599cf416125d4034.js","sourcesContent":["import refs from './refs.js';\r\nimport { error, Stack } from '@pnotify/core';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\n\r\nlet notice;\r\nconst stack1 = new Stack({\r\n  dir1: 'down',\r\n  firstpos1: 75,\r\n  dir2: 'left',\r\n  firstpos2: 75,\r\n});\r\n\r\nconst fetchCountries = searchQuery => {\r\n  let markup = '';\r\n  const url = 'https://restcountries.eu/rest/v2/name/';\r\n  return fetch(url + searchQuery)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if (data.length > 10) {\r\n        notice = error({\r\n          text: 'Too many matches found. Please enter a more specific query!',\r\n          stack: stack1,\r\n        });\r\n      } else if (data.length === 1) {\r\n        if (stack1.length) {\r\n          notice.close();\r\n        }\r\n        const country = data[0];\r\n        markup = `<div class=\"output__country\">\r\n        <div class=\"output__country-name\">${country.name}</div>\r\n        <div class=\"output__country-info\">\r\n        <div class=\"output__country-data\">\r\n        <div class=\"output__country-capital\"><span class=\"label\">Capital: </span>${country.capital}</div>\r\n        <div class=\"output__country-population\"><span class=\"label\">Population: </span>${country.population}</div>`;\r\n        if (country.languages.length > 1) {\r\n          markup += '<span class=\"label\">Languages: </span>';\r\n          markup += '<ul class=\"output__country-listLang\">';\r\n          country.languages.forEach(({ name }) => {\r\n            markup += `<li>${name}</li>`;\r\n          });\r\n          markup += '</ul>';\r\n        } else {\r\n          markup += `<div class=\"output__country-lang\"><span class=\"label\">Language: </span>${country.languages[0].name}</div>`;\r\n        }\r\n        markup += `</div>\r\n        <img class=\"output__country-flag\" src=\"${country.flag}\"></div>\r\n        </div></div>`;\r\n      } else {\r\n        if (stack1.length) {\r\n          notice.close();\r\n        }\r\n        const countries = data.map(({ name }) => name);\r\n        markup = '<ul class=\"output__list\">';\r\n        countries.forEach(country => {\r\n          markup += `<li>${country}</li>`;\r\n        });\r\n        markup += '</ul>';\r\n      }\r\n      refs.output.innerHTML = markup;\r\n    });\r\n};\r\n\r\nexport default fetchCountries;\r\n","export default {\r\n  query: document.querySelector('input.query'),\r\n  output: document.querySelector('.output'),\r\n};\r\n","import debounce from 'lodash.debounce';\r\nimport refs from './js/refs.js';\r\nimport fetchCountries from './js/fetchCountries.js';\r\nimport './css/styles.css';\r\n\r\nlet strQuery = '';\r\nconst countries = [];\r\nrefs.query.value = '';\r\n\r\nconst onInputDebounce = debounce(e => {\r\n  strQuery = e.target.value;\r\n  if (strQuery) {\r\n    fetchCountries(strQuery);\r\n  }\r\n}, 500);\r\n\r\nrefs.query.addEventListener('input', onInputDebounce);\r\n"],"sourceRoot":""}